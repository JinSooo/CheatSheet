name: Package
on:
  push:
    tags:
      - "*"
jobs:
  change-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
      - id: outputstep
        run: |
          echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> "$GITHUB_OUTPUT"
      - name: Change Version for Windows
        run: |
          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\",/g" package.json
          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"/g" src-tauri/tauri.conf.json
          sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"/g" src-tauri/Cargo.toml
          echo $(git describe --tags | sed 's/-[0-9]*-.*//g')
      - name: Upload Artifacts for Windows
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: ./*
          if-no-files-found: error

  build-for-macos:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        target: [aarch64-apple-darwin, x86_64-apple-darwin]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm format
      - name: Build and Package
        run: |
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build --target ${{ matrix.target }}
      - name: Change File Name
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/CheatSheet.app.tar.gz src-tauri/target/aarch64-apple-darwin/release/bundle/macos/CheatSheet_${{needs.change-version.outputs.version}}_aarch64.app.tar.gz
          sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/CheatSheet.app.tar.gz.sig src-tauri/target/aarch64-apple-darwin/release/bundle/macos/CheatSheet_${{needs.change-version.outputs.version}}_aarch64.app.tar.gz.sig
      - name: Change File Name
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/CheatSheet.app.tar.gz src-tauri/target/x86_64-apple-darwin/release/bundle/macos/CheatSheet_${{needs.change-version.outputs.version}}_x64.app.tar.gz
          sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/CheatSheet.app.tar.gz.sig src-tauri/target/x86_64-apple-darwin/release/bundle/macos/CheatSheet_${{needs.change-version.outputs.version}}_x64.app.tar.gz.sig
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos_${{ matrix.target }}_dmg
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          if-no-files-found: error
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos_${{ matrix.target }}_updater
          path: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*
  build-for-windows:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, aarch64-pc-windows-msvc]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            toolchain: stable-x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
            toolchain: stable-i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            toolchain: stable-aarch64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
          rustup toolchain install --force-non-host ${{ matrix.toolchain }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm format
      - name: Build and Package
        run: |
          $env:TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          $env:TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build -b nsis,updater --target ${{ matrix.target }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows_${{ matrix.target }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe*
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*

  release-update:
    needs: [build-for-macos, build-for-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
      - name: Get Tag Name
        run: |
          echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> $GITHUB_ENV
          echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')"
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: pnpm install
        run: pnpm install
      - name: Release updater file
        run: pnpm run updater
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{env.VERSION}}
          tag_name: updater
          token: ${{ secrets.TOKEN }}
          files: update.json
